// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:4.0.0.0
//      SpecFlow Generator Version:4.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace argus_media_technical_task.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CheckoutSystemFeature : object, Xunit.IClassFixture<CheckoutSystemFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CheckoutSystem.feature"
#line hidden
        
        public CheckoutSystemFeature(CheckoutSystemFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunnerForAssembly(null, TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.GetWorkerId());
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CheckoutSystem", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            string testWorkerId = testRunner.TestWorkerId;
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
            TechTalk.SpecFlow.xUnit.SpecFlowPlugin.XUnitParallelWorkerTracker.Instance.ReleaseWorker(testWorkerId);
        }
        
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            await this.TestInitializeAsync();
        }
        
        async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="A group of 4 people order 4 starters, 4 mains and 4 drinks. The endpoint returns " +
            "a correctly calculated bill")]
        [Xunit.TraitAttribute("FeatureTitle", "CheckoutSystem")]
        [Xunit.TraitAttribute("Description", "A group of 4 people order 4 starters, 4 mains and 4 drinks. The endpoint returns " +
            "a correctly calculated bill")]
        public async System.Threading.Tasks.Task AGroupOf4PeopleOrder4Starters4MainsAnd4Drinks_TheEndpointReturnsACorrectlyCalculatedBill()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A group of 4 people order 4 starters, 4 mains and 4 drinks. The endpoint returns " +
                    "a correctly calculated bill", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
    await testRunner.GivenAsync("a group of 4 people order 4 starters, 4 mains and 4 drinks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
    await testRunner.WhenAsync("the group requests their final bill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
    await testRunner.ThenAsync("the First total should be correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName=@"A group of 2 people order 1 starter and 2 mains and 2 drinks before 19:00. The bill is requested and the correct amount is shown on the bill. The group of two people are then joined by 2 more people at 20:00 who order 2 mains and 2 drinks, when the party is ready to leave the final bill is requested and is correct.")]
        [Xunit.TraitAttribute("FeatureTitle", "CheckoutSystem")]
        [Xunit.TraitAttribute("Description", @"A group of 2 people order 1 starter and 2 mains and 2 drinks before 19:00. The bill is requested and the correct amount is shown on the bill. The group of two people are then joined by 2 more people at 20:00 who order 2 mains and 2 drinks, when the party is ready to leave the final bill is requested and is correct.")]
        public async System.Threading.Tasks.Task AGroupOf2PeopleOrder1StarterAnd2MainsAnd2DrinksBefore1900_TheBillIsRequestedAndTheCorrectAmountIsShownOnTheBill_TheGroupOfTwoPeopleAreThenJoinedBy2MorePeopleAt2000WhoOrder2MainsAnd2DrinksWhenThePartyIsReadyToLeaveTheFinalBillIsRequestedAndIsCorrect_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"A group of 2 people order 1 starter and 2 mains and 2 drinks before 19:00. The bill is requested and the correct amount is shown on the bill. The group of two people are then joined by 2 more people at 20:00 who order 2 mains and 2 drinks, when the party is ready to leave the final bill is requested and is correct.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 9
    await testRunner.GivenAsync("a group of 2 people order 1 starters, 2 mains and 2 drinks before \"19:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
    await testRunner.WhenAsync("the group requests their bill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    await testRunner.ThenAsync("the first interim total should be correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
    await testRunner.WhenAsync("2 more people join at \"20:00\" and order 2 mains and 2 drinks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
    await testRunner.AndAsync("the group requests their final bill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 14
    await testRunner.ThenAsync("the Second total should be correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName=@"A group of 4 people order a starter, 1 mains and a drink each. The bill is requested and correctly calculated. A member of the group cancels their order and the order is now updated to reflect one member of the party leaving. A final bill is requested as the party is ready to leave and final amount is correct and reflects the changes to the group.")]
        [Xunit.TraitAttribute("FeatureTitle", "CheckoutSystem")]
        [Xunit.TraitAttribute("Description", @"A group of 4 people order a starter, 1 mains and a drink each. The bill is requested and correctly calculated. A member of the group cancels their order and the order is now updated to reflect one member of the party leaving. A final bill is requested as the party is ready to leave and final amount is correct and reflects the changes to the group.")]
        public async System.Threading.Tasks.Task AGroupOf4PeopleOrderAStarter1MainsAndADrinkEach_TheBillIsRequestedAndCorrectlyCalculated_AMemberOfTheGroupCancelsTheirOrderAndTheOrderIsNowUpdatedToReflectOneMemberOfThePartyLeaving_AFinalBillIsRequestedAsThePartyIsReadyToLeaveAndFinalAmountIsCorrectAndReflectsTheChangesToTheGroup_()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"A group of 4 people order a starter, 1 mains and a drink each. The bill is requested and correctly calculated. A member of the group cancels their order and the order is now updated to reflect one member of the party leaving. A final bill is requested as the party is ready to leave and final amount is correct and reflects the changes to the group.", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 17
    await testRunner.GivenAsync("a group of 4 people order 4 starters, 4 mains and 4 drinks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
    await testRunner.WhenAsync("the group requests their bill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
    await testRunner.ThenAsync("the second interim total should be correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    await testRunner.WhenAsync("1 person in the group cancels their order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
    await testRunner.AndAsync("the group requests their final bill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    await testRunner.ThenAsync("the Third total should be correct", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "4.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await CheckoutSystemFeature.FeatureSetupAsync();
            }
            
            async System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await CheckoutSystemFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
